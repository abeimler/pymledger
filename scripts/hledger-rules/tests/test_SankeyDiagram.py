import unittest

from pymledger import Const
from pymledger.SankeyDiagram import get_sankey_row_cols, get_sankey_rows_cols, get_sankey_rows_values, get_sankey_link, \
    get_sankey_data, get_sankey_data_budget_expenses_plotly_figure, get_sankey_data_budget_expenses, \
    get_sankey_data_income_budget_expenses, get_sankey_data_income_budget_expenses_plotly_figure

Const.FORECAST_BUDGET_EXPENSE_MAP = {
    'Assets:Bank:Budget:Haushalt': 'Expenses:Haushalt',
    'Assets:Bank:Budget:Versicherungen': 'Expenses:Versicherungen',
    'Assets:Bank:Budget:Kleidung': 'Expenses:Kleidung',
    'Assets:Bank:Budget:Gesundheit': 'Expenses:Gesundheit',
    'Assets:Bank:Budget:Fahrgeld': 'Expenses:Fahrgeld',
    'Assets:Bank:Budget:Wunschliste': 'Expenses:Wunschliste',
    'Assets:Bank:Budget:Abo:Ticket': 'Expenses:Abo:Ticket',
    'Assets:Bank:Budget:Abo:Multimedia': 'Expenses:Abo:Multimedia',
    'Assets:Bank:Budget:Abo:Support': 'Expenses:Abo:Support',
}

TEST_ROWS_INCOME = [
    {
        'account': 'Income:Salary',
        'average': '500,00 EUR',
    },
    {
        'account': 'total',
        'average': '500,00 EUR',
    },
]

TEST_ROWS_ASSETS_BANK_BUDGET = [
    {
        'account': 'Assets:Bank:Budget:Haushalt',
        'average': '10,00 EUR',
    },
    {
        'account': 'Assets:Bank:Budget:Versicherungen',
        'average': '20,00 EUR',
    },
    {
        'account': 'Assets:Bank:Budget:Kleidung',
        'average': '30,00 EUR',
    },
    {
        'account': 'Assets:Bank:Budget:Gesundheit',
        'average': '40,00 EUR',
    },
    {
        'account': 'Assets:Bank:Budget:Fahrgeld',
        'average': '50,00 EUR',
    },
    {
        'account': 'Assets:Bank:Budget:Wunschliste',
        'average': '60,00 EUR',
    },
    {
        'account': 'Assets:Bank:Budget:Abo:Ticket',
        'average': '70,00 EUR',
    },
    {
        'account': 'Assets:Bank:Budget:Abo:Multimedia',
        'average': '80,00 EUR',
    },
    {
        'account': 'Assets:Bank:Budget:Abo:Support',
        'average': '70,00 EUR',
    },
    {
        'account': 'total',
        'average': '450,00 EUR',
    },
]

TEST_ROWS_EXPENSES_BANK_BUDGET = [
    {
        'account': 'Expenses:Haushalt',
        'average': '20,00 EUR',
    },
    {
        'account': 'Expenses:Versicherungen',
        'average': '12,00 EUR',
    },
    {
        'account': 'Expenses:Kleidung',
        'average': '5,00 EUR',
    },
    {
        'account': 'Expenses:Gesundheit',
        'average': '20,00 EUR',
    },
    {
        'account': 'Expenses:Fahrgeld',
        'average': '90,00 EUR',
    },
    {
        'account': 'Expenses:Wunschliste',
        'average': '20,00 EUR',
    },
    {
        'account': 'Expenses:Abo:Ticket',
        'average': '70,00 EUR',
    },
    {
        'account': 'Expenses:Abo:Multimedia',
        'average': '78,00 EUR',
    },
    {
        'account': 'Expenses:Abo:Support',
        'average': '70,00 EUR',
    },
    {
        'account': 'total',
        'average': '385,00 EUR',
    },
]


class SankeyDiagramTestCase(unittest.TestCase):
    def test_get_sankey_row_cols(self):
        config = {}
        expected = ['Assets', 'Assets:Bank', 'Assets:Bank:Budget', 'Assets:Bank:Budget:Haushalt']
        self.assertEqual(expected, get_sankey_row_cols(config, TEST_ROWS_ASSETS_BANK_BUDGET[0]))  # add assertion here

    def test_get_sankey_rows_cols(self):
        config = {}
        expected = ['Assets',
                    'Assets:Bank',
                    'Assets:Bank:Budget',
                    'Assets:Bank:Budget:Abo',
                    'Assets:Bank:Budget:Abo:Multimedia',
                    'Assets:Bank:Budget:Abo:Support',
                    'Assets:Bank:Budget:Abo:Ticket',
                    'Assets:Bank:Budget:Fahrgeld',
                    'Assets:Bank:Budget:Gesundheit',
                    'Assets:Bank:Budget:Haushalt',
                    'Assets:Bank:Budget:Kleidung',
                    'Assets:Bank:Budget:Versicherungen',
                    'Assets:Bank:Budget:Wunschliste']
        self.assertEqual(expected, get_sankey_rows_cols(config, TEST_ROWS_ASSETS_BANK_BUDGET))  # add assertion here

    def test_get_sankey_rows_values(self):
        config = {}
        expected = {'Assets': 430.0,
                    'Assets:Bank': 430.0,
                    'Assets:Bank:Budget': 430.0,
                    'Assets:Bank:Budget:Abo': 220.0,
                    'Assets:Bank:Budget:Abo:Multimedia': 80.0,
                    'Assets:Bank:Budget:Abo:Support': 70.0,
                    'Assets:Bank:Budget:Abo:Ticket': 70.0,
                    'Assets:Bank:Budget:Fahrgeld': 50.0,
                    'Assets:Bank:Budget:Gesundheit': 40.0,
                    'Assets:Bank:Budget:Haushalt': 10.0,
                    'Assets:Bank:Budget:Kleidung': 30.0,
                    'Assets:Bank:Budget:Versicherungen': 20.0,
                    'Assets:Bank:Budget:Wunschliste': 60.0}
        self.assertEqual(expected, get_sankey_rows_values(config, TEST_ROWS_ASSETS_BANK_BUDGET))  # add assertion here

    def test_get_sankey_link(self):
        config = {}
        expected = {'source': [0, 0, 0, 0, 0, 0, 0, 0, 0],
                    'target': [10, 12, 11, 9, 8, 13, 7, 5, 6],
                    'value': [10.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 70.0]}
        self.assertEqual(expected, get_sankey_link(config, 'Assets:Bank:Budget',
                                                   TEST_ROWS_ASSETS_BANK_BUDGET))  # add assertion here

    def test_get_sankey_data(self):
        config = {}
        expected = {'link': {'source': [0, 0, 0, 0, 0, 0, 0, 0, 0],
                             'target': [10, 12, 11, 9, 8, 13, 7, 5, 6],
                             'value': [10.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 70.0]},
                    'node': {'label': ['Assets:Bank:Budget',
                                       'Assets',
                                       'Assets:Bank',
                                       'Assets:Bank:Budget',
                                       'Assets:Bank:Budget:Abo',
                                       'Assets:Bank:Budget:Abo:Multimedia',
                                       'Assets:Bank:Budget:Abo:Support',
                                       'Assets:Bank:Budget:Abo:Ticket',
                                       'Assets:Bank:Budget:Fahrgeld',
                                       'Assets:Bank:Budget:Gesundheit',
                                       'Assets:Bank:Budget:Haushalt',
                                       'Assets:Bank:Budget:Kleidung',
                                       'Assets:Bank:Budget:Versicherungen',
                                       'Assets:Bank:Budget:Wunschliste']},
                    'valueformat': '.2f EUR',
                    'valuesuffix': ' EUR'}
        self.assertEqual(expected, get_sankey_data(config, 'Assets:Bank:Budget',
                                                   TEST_ROWS_ASSETS_BANK_BUDGET))  # add assertion here

    def test_get_sanky_data_budget_expenses(self):
        config = {
            'sankey': {
                'node': {
                    'pad': 15,
                    'thickness': 20,
                    'line': {'color': 'black', 'width': 0.5},
                    'color': 'blue',
                },
                'title_text': 'Test Sankey Diagram',
                'font_size': 10,
                'show_unbudget': False,
            }
        }
        expected = {'link': {'customdata': ['2.33%',
                                            '200.00%',
                                            '4.65%',
                                            '60.00%',
                                            '6.98%',
                                            '16.67%',
                                            '9.30%',
                                            '50.00%',
                                            '11.63%',
                                            '180.00%',
                                            '13.95%',
                                            '33.33%',
                                            '16.28%',
                                            '100.00%',
                                            '18.60%',
                                            '97.50%',
                                            '16.28%',
                                            '100.00%',
                                            '5.19%',
                                            '3.12%',
                                            '1.30%',
                                            '5.19%',
                                            '23.38%',
                                            '5.19%',
                                            '18.18%',
                                            '20.26%',
                                            '18.18%'],
                             'hovertemplate': '%{source.label} -> %{target.label}: %{value} '
                                              '(%{customdata})<extra></extra>',
                             'source': [2,
                                        9,
                                        2,
                                        11,
                                        2,
                                        10,
                                        2,
                                        8,
                                        2,
                                        7,
                                        2,
                                        12,
                                        2,
                                        6,
                                        2,
                                        4,
                                        2,
                                        5,
                                        20,
                                        22,
                                        21,
                                        19,
                                        18,
                                        23,
                                        17,
                                        15,
                                        16],
                             'target': [9,
                                        20,
                                        11,
                                        22,
                                        10,
                                        21,
                                        8,
                                        19,
                                        7,
                                        18,
                                        12,
                                        23,
                                        6,
                                        17,
                                        4,
                                        15,
                                        5,
                                        16,
                                        13,
                                        13,
                                        13,
                                        13,
                                        13,
                                        13,
                                        13,
                                        13,
                                        13],
                             'value': [10.0,
                                       20.0,
                                       20.0,
                                       12.0,
                                       30.0,
                                       5.0,
                                       40.0,
                                       20.0,
                                       50.0,
                                       90.0,
                                       60.0,
                                       20.0,
                                       70.0,
                                       70.0,
                                       80.0,
                                       78.0,
                                       70.0,
                                       70.0,
                                       20.0,
                                       12.0,
                                       5.0,
                                       20.0,
                                       90.0,
                                       20.0,
                                       70.0,
                                       78.0,
                                       70.0]},
                    'node': {'color': 'blue',
                             'label': ['Assets',
                                       'Assets:Bank',
                                       'Assets:Bank:Budget',
                                       'Assets:Bank:Budget:Abo',
                                       'Assets:Bank:Budget:Abo:Multimedia',
                                       'Assets:Bank:Budget:Abo:Support',
                                       'Assets:Bank:Budget:Abo:Ticket',
                                       'Assets:Bank:Budget:Fahrgeld',
                                       'Assets:Bank:Budget:Gesundheit',
                                       'Assets:Bank:Budget:Haushalt',
                                       'Assets:Bank:Budget:Kleidung',
                                       'Assets:Bank:Budget:Versicherungen',
                                       'Assets:Bank:Budget:Wunschliste',
                                       'Expenses',
                                       'Expenses:Abo',
                                       'Expenses:Abo:Multimedia',
                                       'Expenses:Abo:Support',
                                       'Expenses:Abo:Ticket',
                                       'Expenses:Fahrgeld',
                                       'Expenses:Gesundheit',
                                       'Expenses:Haushalt',
                                       'Expenses:Kleidung',
                                       'Expenses:Versicherungen',
                                       'Expenses:Wunschliste'],
                             'line': {'color': 'black', 'width': 0.5},
                             'pad': 15,
                             'thickness': 20},
                    'valueformat': '.2f EUR',
                    'valuesuffix': ' EUR'}
        self.assertEqual(expected, get_sankey_data_budget_expenses(config, None, 'Assets:Bank:Budget',
                                                                   'Expenses', TEST_ROWS_ASSETS_BANK_BUDGET,
                                                                   TEST_ROWS_EXPENSES_BANK_BUDGET))  # add assertion here

    def test_get_sanky_data_budget_expenses_depth(self):
        config = {
            'sankey': {
                'node': {
                    'pad': 15,
                    'thickness': 20,
                    'line': {'color': 'black', 'width': 0.5},
                    'color': 'blue',
                },
                'title_text': 'Test Sankey Diagram',
                'font_size': 10,
                'show_unbudget': False,
            }
        }
        expected = {'link': {'customdata': ['2.33%',
                                            '200.00%',
                                            '4.65%',
                                            '60.00%',
                                            '6.98%',
                                            '16.67%',
                                            '9.30%',
                                            '50.00%',
                                            '11.63%',
                                            '180.00%',
                                            '13.95%',
                                            '33.33%',
                                            '5.19%',
                                            '3.12%',
                                            '1.30%',
                                            '5.19%',
                                            '23.38%',
                                            '5.19%',
                                            '18.18%',
                                            '20.26%',
                                            '18.18%'],
                             'hovertemplate': '%{source.label} -> %{target.label}: %{value} '
                                              '(%{customdata})<extra></extra>',
                             'source': [2,
                                        9,
                                        2,
                                        11,
                                        2,
                                        10,
                                        2,
                                        8,
                                        2,
                                        7,
                                        2,
                                        12,
                                        20,
                                        22,
                                        21,
                                        19,
                                        18,
                                        23,
                                        17,
                                        15,
                                        16],
                             'target': [9,
                                        20,
                                        11,
                                        22,
                                        10,
                                        21,
                                        8,
                                        19,
                                        7,
                                        18,
                                        12,
                                        23,
                                        13,
                                        13,
                                        13,
                                        13,
                                        13,
                                        13,
                                        13,
                                        13,
                                        13],
                             'value': [10.0,
                                       20.0,
                                       20.0,
                                       12.0,
                                       30.0,
                                       5.0,
                                       40.0,
                                       20.0,
                                       50.0,
                                       90.0,
                                       60.0,
                                       20.0,
                                       20.0,
                                       12.0,
                                       5.0,
                                       20.0,
                                       90.0,
                                       20.0,
                                       70.0,
                                       78.0,
                                       70.0]},
                    'node': {'color': 'blue',
                             'label': ['Assets',
                                       'Assets:Bank',
                                       'Assets:Bank:Budget',
                                       'Assets:Bank:Budget:Abo',
                                       'Assets:Bank:Budget:Abo:Multimedia',
                                       'Assets:Bank:Budget:Abo:Support',
                                       'Assets:Bank:Budget:Abo:Ticket',
                                       'Assets:Bank:Budget:Fahrgeld',
                                       'Assets:Bank:Budget:Gesundheit',
                                       'Assets:Bank:Budget:Haushalt',
                                       'Assets:Bank:Budget:Kleidung',
                                       'Assets:Bank:Budget:Versicherungen',
                                       'Assets:Bank:Budget:Wunschliste',
                                       'Expenses',
                                       'Expenses:Abo',
                                       'Expenses:Abo:Multimedia',
                                       'Expenses:Abo:Support',
                                       'Expenses:Abo:Ticket',
                                       'Expenses:Fahrgeld',
                                       'Expenses:Gesundheit',
                                       'Expenses:Haushalt',
                                       'Expenses:Kleidung',
                                       'Expenses:Versicherungen',
                                       'Expenses:Wunschliste'],
                             'line': {'color': 'black', 'width': 0.5},
                             'pad': 15,
                             'thickness': 20},
                    'valueformat': '.2f EUR',
                    'valuesuffix': ' EUR'}
        self.assertEqual(expected, get_sankey_data_budget_expenses(config, None, 'Assets:Bank:Budget',
                                                                   'Expenses', TEST_ROWS_ASSETS_BANK_BUDGET,
                                                                   TEST_ROWS_EXPENSES_BANK_BUDGET,
                                                                   4))  # add assertion here

    def test_get_sanky_data_budget_expenses_unbudget(self):
        config = {
            'sankey': {
                'node': {
                    'pad': 15,
                    'thickness': 20,
                    'line': {'color': 'black', 'width': 0.5},
                    'color': 'blue',
                },
                'title_text': 'Test Sankey Diagram',
                'font_size': 10,
                'show_unbudget': True,
            }
        }
        expected = {'link': {'customdata': ['2.33%',
                                            '200.00%',
                                            '4.65%',
                                            '60.00%',
                                            '40.00%',
                                            '6.98%',
                                            '16.67%',
                                            '83.33%',
                                            '9.30%',
                                            '50.00%',
                                            '50.00%',
                                            '11.63%',
                                            '180.00%',
                                            '13.95%',
                                            '33.33%',
                                            '66.67%',
                                            '16.28%',
                                            '100.00%',
                                            '18.60%',
                                            '97.50%',
                                            '2.50%',
                                            '16.28%',
                                            '100.00%',
                                            '5.19%',
                                            '3.12%',
                                            '1.30%',
                                            '5.19%',
                                            '23.38%',
                                            '5.19%',
                                            '18.18%',
                                            '20.26%',
                                            '18.18%'],
                             'hovertemplate': '%{source.label} -> %{target.label}: %{value} '
                                              '(%{customdata})<extra></extra>',
                             'source': [2,
                                        9,
                                        2,
                                        11,
                                        11,
                                        2,
                                        10,
                                        10,
                                        2,
                                        8,
                                        8,
                                        2,
                                        7,
                                        2,
                                        12,
                                        12,
                                        2,
                                        6,
                                        2,
                                        4,
                                        4,
                                        2,
                                        5,
                                        20,
                                        22,
                                        21,
                                        19,
                                        18,
                                        23,
                                        17,
                                        15,
                                        16],
                             'target': [9,
                                        20,
                                        11,
                                        22,
                                        24,
                                        10,
                                        21,
                                        24,
                                        8,
                                        19,
                                        24,
                                        7,
                                        18,
                                        12,
                                        23,
                                        24,
                                        6,
                                        17,
                                        4,
                                        15,
                                        24,
                                        5,
                                        16,
                                        13,
                                        13,
                                        13,
                                        13,
                                        13,
                                        13,
                                        13,
                                        13,
                                        13],
                             'value': [10.0,
                                       20.0,
                                       20.0,
                                       12.0,
                                       8.0,
                                       30.0,
                                       5.0,
                                       25.0,
                                       40.0,
                                       20.0,
                                       20.0,
                                       50.0,
                                       90.0,
                                       60.0,
                                       20.0,
                                       40.0,
                                       70.0,
                                       70.0,
                                       80.0,
                                       78.0,
                                       2.0,
                                       70.0,
                                       70.0,
                                       20.0,
                                       12.0,
                                       5.0,
                                       20.0,
                                       90.0,
                                       20.0,
                                       70.0,
                                       78.0,
                                       70.0]},
                    'node': {'color': 'blue',
                             'label': ['Assets',
                                       'Assets:Bank',
                                       'Assets:Bank:Budget',
                                       'Assets:Bank:Budget:Abo',
                                       'Assets:Bank:Budget:Abo:Multimedia',
                                       'Assets:Bank:Budget:Abo:Support',
                                       'Assets:Bank:Budget:Abo:Ticket',
                                       'Assets:Bank:Budget:Fahrgeld',
                                       'Assets:Bank:Budget:Gesundheit',
                                       'Assets:Bank:Budget:Haushalt',
                                       'Assets:Bank:Budget:Kleidung',
                                       'Assets:Bank:Budget:Versicherungen',
                                       'Assets:Bank:Budget:Wunschliste',
                                       'Expenses',
                                       'Expenses:Abo',
                                       'Expenses:Abo:Multimedia',
                                       'Expenses:Abo:Support',
                                       'Expenses:Abo:Ticket',
                                       'Expenses:Fahrgeld',
                                       'Expenses:Gesundheit',
                                       'Expenses:Haushalt',
                                       'Expenses:Kleidung',
                                       'Expenses:Versicherungen',
                                       'Expenses:Wunschliste',
                                       'Assets:Bank:Unbudget'],
                             'line': {'color': 'black', 'width': 0.5},
                             'pad': 15,
                             'thickness': 20},
                    'valueformat': '.2f EUR',
                    'valuesuffix': ' EUR'}
        self.assertEqual(expected, get_sankey_data_budget_expenses(config, 'Assets:Bank:Unbudget', 'Assets:Bank:Budget',
                                                                   'Expenses', TEST_ROWS_ASSETS_BANK_BUDGET,
                                                                   TEST_ROWS_EXPENSES_BANK_BUDGET))  # add assertion here

    def test_get_sankey_data_income_budget_expenses(self):
        config = {
            'sankey': {
                'node': {
                    'pad': 15,
                    'thickness': 20,
                    'line': {'color': 'black', 'width': 0.5},
                    'color': 'blue',
                },
                'title_text': 'Test Sankey Diagram',
                'font_size': 10,
                'show_unbudget': False,
            }
        }
        expected = {'link': {'customdata': ['2.33%',
                                            '200.00%',
                                            '4.65%',
                                            '60.00%',
                                            '6.98%',
                                            '16.67%',
                                            '9.30%',
                                            '50.00%',
                                            '11.63%',
                                            '180.00%',
                                            '13.95%',
                                            '33.33%',
                                            '16.28%',
                                            '100.00%',
                                            '18.60%',
                                            '97.50%',
                                            '16.28%',
                                            '100.00%',
                                            '5.19%',
                                            '3.12%',
                                            '1.30%',
                                            '5.19%',
                                            '23.38%',
                                            '5.19%',
                                            '18.18%',
                                            '20.26%',
                                            '18.18%',
                                            '100.00%'],
                             'hovertemplate': '%{source.label} -> %{target.label}: %{value} '
                                              '(%{customdata})<extra></extra>',
                             'source': [2,
                                        9,
                                        2,
                                        11,
                                        2,
                                        10,
                                        2,
                                        8,
                                        2,
                                        7,
                                        2,
                                        12,
                                        2,
                                        6,
                                        2,
                                        4,
                                        2,
                                        5,
                                        20,
                                        22,
                                        21,
                                        19,
                                        18,
                                        23,
                                        17,
                                        15,
                                        16,
                                        25],
                             'target': [9,
                                        20,
                                        11,
                                        22,
                                        10,
                                        21,
                                        8,
                                        19,
                                        7,
                                        18,
                                        12,
                                        23,
                                        6,
                                        17,
                                        4,
                                        15,
                                        5,
                                        16,
                                        13,
                                        13,
                                        13,
                                        13,
                                        13,
                                        13,
                                        13,
                                        13,
                                        13,
                                        2],
                             'value': [10.0,
                                       20.0,
                                       20.0,
                                       12.0,
                                       30.0,
                                       5.0,
                                       40.0,
                                       20.0,
                                       50.0,
                                       90.0,
                                       60.0,
                                       20.0,
                                       70.0,
                                       70.0,
                                       80.0,
                                       78.0,
                                       70.0,
                                       70.0,
                                       20.0,
                                       12.0,
                                       5.0,
                                       20.0,
                                       90.0,
                                       20.0,
                                       70.0,
                                       78.0,
                                       70.0,
                                       500.0]},
                    'node': {'color': 'blue',
                             'label': ['Assets',
                                       'Assets:Bank',
                                       'Assets:Bank:Budget',
                                       'Assets:Bank:Budget:Abo',
                                       'Assets:Bank:Budget:Abo:Multimedia',
                                       'Assets:Bank:Budget:Abo:Support',
                                       'Assets:Bank:Budget:Abo:Ticket',
                                       'Assets:Bank:Budget:Fahrgeld',
                                       'Assets:Bank:Budget:Gesundheit',
                                       'Assets:Bank:Budget:Haushalt',
                                       'Assets:Bank:Budget:Kleidung',
                                       'Assets:Bank:Budget:Versicherungen',
                                       'Assets:Bank:Budget:Wunschliste',
                                       'Expenses',
                                       'Expenses:Abo',
                                       'Expenses:Abo:Multimedia',
                                       'Expenses:Abo:Support',
                                       'Expenses:Abo:Ticket',
                                       'Expenses:Fahrgeld',
                                       'Expenses:Gesundheit',
                                       'Expenses:Haushalt',
                                       'Expenses:Kleidung',
                                       'Expenses:Versicherungen',
                                       'Expenses:Wunschliste',
                                       'Income',
                                       'Income:Salary'],
                             'line': {'color': 'black', 'width': 0.5},
                             'pad': 15,
                             'thickness': 20},
                    'valueformat': '.2f EUR',
                    'valuesuffix': ' EUR'}
        self.assertEqual(expected, get_sankey_data_income_budget_expenses(config, 'Income', TEST_ROWS_INCOME,
                                                                          'Assets:Bank:Unbudget', 'Assets:Bank:Budget',
                                                                          'Expenses', TEST_ROWS_ASSETS_BANK_BUDGET,
                                                                          TEST_ROWS_EXPENSES_BANK_BUDGET))  # add assertion here


fig1 = get_sankey_data_budget_expenses_plotly_figure({
    'sankey': {
        'node': {
            'pad': 15,
            'thickness': 20,
            'line': {'color': 'black', 'width': 0.5},
            'color': 'blue',
        },
        'title_text': 'Test Sankey Diagram',
        'font_size': 10,
        'show_unbudget': False,
    }
}, 'Assets:Bank:Unbudget', 'Assets:Bank:Budget', 'Expenses',
    TEST_ROWS_ASSETS_BANK_BUDGET, TEST_ROWS_EXPENSES_BANK_BUDGET)

fig2 = get_sankey_data_income_budget_expenses_plotly_figure({
    'sankey': {
        'node': {
            'pad': 15,
            'thickness': 20,
            'line': {'color': 'black', 'width': 0.5},
            'color': 'blue',
        },
        'title_text': 'Test Sankey Diagram',
        'font_size': 10,
        'show_unbudget': False,
    }
}, 'Income', TEST_ROWS_INCOME, 'Assets:Bank:Unbudget', 'Assets:Bank:Budget', 'Expenses', TEST_ROWS_ASSETS_BANK_BUDGET,
    TEST_ROWS_EXPENSES_BANK_BUDGET)

# fig2.show()

if __name__ == '__main__':
    unittest.main()
